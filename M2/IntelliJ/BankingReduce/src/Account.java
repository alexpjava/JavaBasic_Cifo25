/*
CREATE TABLE Account (
    IdCuenta INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NumeroCuenta VARCHAR(25) NOT NULL,
    FechaObertura DATE,
    Saldo DECIMAL(19,4)
);
 */

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class Account {

    // Variables de Classe
    private final int idAccount;
    private final String accountNumber;
    private final LocalDate openingDate;
    private float balance;
    private boolean activa;

    private static int id = 1;

    // Podem fer que cada Account tingui una llista de transactions (ArrayList<Transaction>).
    // Per això declarem una llista d'objectes Transaction que es dira transactions;
    private List<Transaction> transactions;

    // Constructor de la classe que demana totes les dades. La creació de l'índex és automàtica.
    public Account(String accountNumber, LocalDate openingDate, float balance, boolean activa){
        this.idAccount = id;
        this.accountNumber = accountNumber;
        this.openingDate= openingDate;
        this.balance= balance;
        this.activa = activa;
        this.transactions = new ArrayList<>();
        id++;
    }
    // Constructor de la classe en què el saldo es 0 i la data d'obertura del compte és automàtica.
    public Account(String accountNumber) {
        this.idAccount = id;
        this.accountNumber = accountNumber;
        this.openingDate = LocalDate.now();
        this.balance = 0.0f;
        this.activa = true;
        this.transactions = new ArrayList<>();
        id++;

    }
    // SETTERS
    public void setBalance(float balance){
        this.balance = balance;
    }
    public void setBActiva(boolean activa){
        this.activa = activa;
    }
    // -------------------------------------------------------------
    // GETTERS
    // -------------------------------------------------------------
    public int getIdAccount(){
        return idAccount;
    }
    public String getAccountNumber(){
        return accountNumber;
    }
    public LocalDate getOpeningDate(){
        return openingDate;
    }
    public float getBalance(){
        return balance;
    }
    public boolean getActiva(){
        return activa;
    }

    public List<Transaction> getTransactions(){ return transactions; }

    // Mètode Static de Class per esbrinar el numero total d'objectes de classe creats.
    public static int getNumberOfAccounts(){
        return id-1;
    }

    // Mètode void per sortida de pantalla de totes les dades del compte incluint totes les transactions
    // per cada una dels comptes.
    public void accountInfo(){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d 'de' MMMM 'de' yyyy", new Locale("es", "ES"));
        String formattedDate = openingDate.format(formatter);
        System.out.println("The account number " + accountNumber + "\nwas opened on " + openingDate +
                "\nwith the amount of " + balance + "Eu. The id is: " + idAccount);
        for(Transaction tra : transactions){
            System.out.println(tra.getType() + " de "  + tra.getAmount() + "Eu. Del dia " + tra.getDate() +
                    " | Saldo: " + tra.getBalanceAfter() + " Eu.");
        }
    }
    /*
    //Mètode per modificar el saldo del compte per un INGRESS al mateix.
    public float deposit(float deposit){
        return (this.balance + deposit);
    }

    //Mètode per modificar el saldo del compte per fer un REINTEGRAMENT.
    public float retiro(float withdrawal){
        return (this.balance - withdrawal);
    }
     */
    // Depositar dinero
    public void deposit(float amount){
        this.balance += amount;
        Transaction t = new Transaction(Transaction.Type.DEPOSIT, amount, this.balance);
        transactions.add(t);
    }

    // Retirar dinero
    public void withdraw(float amount){
        if(amount <= this.balance) {
            this.balance -= amount;
            Transaction t = new Transaction(Transaction.Type.WITHDRAWAL, amount, this.balance);
            transactions.add(t);
        } else {
            System.out.println("No hay saldo sufficient para retirar " + amount + "€");
        }
    }

    // Mostrar historial de transaccions
    public void showTransactions(){
        System.out.println("Historial de transacciones de la cuenta " + accountNumber + ":");
        for(Transaction t : transactions){
            t.transactionInfo();
        }
    }


}
